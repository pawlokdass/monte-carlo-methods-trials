marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 2, replace = FALSE)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 2, replace = T)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 2, replace = T)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 2, replace = T)
?sample
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 2, replace = F)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 2, replace = F)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 2, replace = F)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 2, replace = F)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 2, replace = F)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 2, replace = T)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 2, replace = F)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 3, replace = T)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 6, replace = T)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 3, replace = F)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 4, replace = F)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 4, replace = T)
sample(x = 1:10, size = 5, replace = FALSE)
marbles = c('red', 'blue', 'green')
sample(x = marbles, size = 2, replace = F)
sample(x = 1:10, size = 5, replace = FALSE)
numbers = 1:10
sample(x = numbers, size = 20, replace = TRUE)
sample(x = 1:10, size = 5, replace = FALSE)
numbers = 1:10
sample(x = numbers, size = 20, replace = TRUE)
students = c("Alice", "Bob", "Charlotte", "Dan", "Emily")
sample(x = students, size = 2, replace = FALSE)
students = c("Alice", "Bob", "Charlotte", "Dan", "Emily")
sample(x = students, size = 2, replace = FALSE)
students = c("Alice", "Bob", "Charlotte", "Dan", "Emily")
sample(x = students, size = 2, replace = FALSE)
students = c("Alice", "Bob", "Charlotte", "Dan", "Emily")
sample(x = students, size = 2, replace = FALSE)
random.numbers = sample(x = 1:10, size = 5, replace = TRUE)
sum(random.numbers)
random.numbers = sample(x = 1:10, size = 5, replace = TRUE)
sum(random.numbers)
sample(1:6, size = 1, replace = TRUE) + sample(1:6, size = 1, replace = TRUE)
#But it turns out that there’s a much easier way:
dice.roll <- sample(1:6, size = 2, replace = TRUE)
dice.roll
sum(dice.roll)
sample(1:6, size = 1, replace = TRUE) + sample(1:6, size = 1, replace = TRUE)
#But it turns out that there’s a much easier way:
dice.roll <- sample(1:6, size = 2, replace = TRUE)
dice.roll
sum(dice.roll)
#or, in a single command:
sum(sample(1:6, size = 2, replace = TRUE))
sample(1:6, size = 1, replace = TRUE) + sample(1:6, size = 1, replace = TRUE)
#But it turns out that there’s a much easier way:
dice.roll <- sample(1:6, size = 2, replace = TRUE)
dice.roll
sum(dice.roll)
#or, in a single command:
sum(sample(1:6, size = 2, replace = TRUE))
#Write R code to roll ten fair, six-sided dice and calculate their sum
sum(sample(x = 1:6, size = 10, replace = TRUE))
two.dice <- function(){
dice <- sample(1:6, size = 2, replace = TRUE)
return(sum(dice))
}
two.dice()
two.dice
replicate(n = 20, expr = two.dice())
# returning a vector
replicate(10, sample(1:10, 1, replace = FALSE))
# returning a matrix
replicate(10, sample(1:10, 5, replace = FALSE))
dice.sum <- function(n.dice){
dice <- sample(1:6, size = n.dice, replace = TRUE)
return(sum(dice))
}
# Using replicate, we can roll three six-sided dice and compute the sum fifty times as follows:
replicate(50, dice.sum(3))
my.dice.sum <- function(n.dice, n.sides){
dice <- sample(1:n.sides, size = n.dice, replace = TRUE)
return(sum(dice))
}
replicate(100, my.dice.sum(5,4))
sims <- replicate(100, two.dice())
table(sims)
sims <- replicate(100, two.dice())
table(sims)
sims
?table
sims <- replicate(100, two.dice())
table(sims) #This gives us the frequency of every outcome.
# To convert this to relative frequencies, we need to divide by the number of times we carried out the experiment
table(sims)/length(sims)
sims <- replicate(100, two.dice())
table(sims) #This gives us the frequency of every outcome.
# To convert this to relative frequencies, we need to divide by the number of times we carried out the experiment
table(sims)/length(sims)
plot(table(sims), xlab = 'Sum', ylab = 'Frequency', main = '100 Rolls of 2 Fair Dice')
sims <- replicate(100, two.dice())
table(sims) #This gives us the frequency of every outcome.
# To convert this to relative frequencies, we need to divide by the number of times we carried out the experiment
table(sims)/length(sims)
plot(table(sims), xlab = 'Sum', ylab = 'Frequency', main = '100 Rolls of 2 Fair Dice')
plot(table(sims)/length(sims), xlab = 'Sum', ylab = 'Relative Frequency', main = '100 Rolls of 2 Fair Dice')
more.sims <- replicate(1000, two.dice())
table(more.sims)/length(more.sims)
plot(table(more.sims)/length(more.sims),
xlab = 'Sum', ylab = 'Relative Frequency', main = '1000 Rolls of 2 Fair Dice')
more.sims <- replicate(1000, two.dice())
table(more.sims)/length(more.sims)
plot(table(more.sims)/length(more.sims),
xlab = 'Sum', ylab = 'Relative Frequency', main = '1000 Rolls of 2 Fair Dice')
even.more.sims <- replicate(100000, two.dice())
table(even.more.sims)/length(even.more.sims)
plot(table(even.more.sims)/length(even.more.sims),
xlab = 'Sum', ylab = 'Relative Frequency', main = '100000 Rolls of 2 Fair Dice')
z <- c(12, 6, 3, 7, 10, 9, 3)
z >= 9
T + T
F * 6
z <- c(12, 6, 3, 7, 10, 9, 3)
z >= 9
sum(z >= 9)
z <- c(12, 6, 3, 7, 10, 9, 3)
z >= 9
sum(z >= 9)
sum(z >= 9)/length(z)
T + T
F * 6
# The proportion of elements in z that equal 3
sum(z == 3)/length(z)
# The proportion of elements in  z that are less than 7
sum(z < 7)/length(z)
two.dice()
two.dice
head(even.more.sims)
sum(even.more.sims >= 9)/length(even.more.sims)
head(even.more.sims)
sum(even.more.sims >= 9)/length(even.more.sims)
# Use the same idea to calculate the probability of getting at most 4 when rolling two fair, six-sided dice
sum(even.more.sims <= 4)/length(even.more.sims)
# The following expression will be TRUE for each element of  z that is between 7 and 10 inclusive:
(7 <= z) & (z <= 10)
# The following expression will be TRUE for each element of  z that is between 7 and 10 inclusive:
(7 <= z) & (z <= 10)
sum((7 <= z) & (z <= 10))/length(z) # proportion
# The following expression will be TRUE for each element of  z that is between 7 and 10 inclusive:
(7 <= z) & (z <= 10)
sum((7 <= z) & (z <= 10))/length(z) # proportion
# To calculate the proportion of elements in z that are either greater than 10 or less than 7, we use | as follows:
sum((z > 10) | (z < 7))/length(z)
# The following expression will be TRUE for each element of  z that is between 7 and 10 inclusive:
(7 <= z) & (z <= 10)
sum((7 <= z) & (z <= 10))/length(z) # proportion
# To calculate the proportion of elements in z that are either greater than 10 or less than 7, we use | as follows:
sum((z > 10) | (z < 7))/length(z)
# Using this idea, we can calculate the probability of getting a sum between 6 and 8 inclusive
sum((6 <= even.more.sims) & (even.more.sims <= 8))/length(even.more.sims)
# The following expression will be TRUE for each element of  z that is between 7 and 10 inclusive:
(7 <= z) & (z <= 10)
sum((7 <= z) & (z <= 10))/length(z) # proportion
# To calculate the proportion of elements in z that are either greater than 10 or less than 7, we use | as follows:
sum((z > 10) | (z < 7))/length(z)
# Using this idea, we can calculate the probability of getting a sum between 6 and 8 inclusive
sum((6 <= even.more.sims) & (even.more.sims <= 8))/length(even.more.sims)
# and sum below 6 or above 8, exclusive as follows
sum((even.more.sims < 6) | (even.more.sims > 8))/length(even.more.sims)
passadieci <- replicate(100000, my.dice.sum(n.dice = 3, n.sides = 6)) # model simulation
table(passadieci)/length(passadieci)
plot(table(passadieci)/length(passadieci), xlab='Sum', ylab='Relative frequency', main = '100000 Rolls of 3 Fair Dice')
sum(passadieci >= 11)/length(passadieci) # Q1
sum(passadieci == 11)/length(passadieci) # Q2
sum(passadieci == 12)/length(passadieci)
passadieci <- replicate(100000, my.dice.sum(n.dice = 3, n.sides = 6)) # model simulation
table(passadieci)/length(passadieci)
plot(table(passadieci)/length(passadieci), xlab='Sum', ylab='Relative frequency', main = '100000 Rolls of 3 Fair Dice') # Q4
passadieci <- replicate(1000000, my.dice.sum(n.dice = 3, n.sides = 6)) # model simulation
table(passadieci)/length(passadieci)
plot(table(passadieci)/length(passadieci), xlab='Sum', ylab='Relative frequency', main = '100000 Rolls of 3 Fair Dice') # Q4
sum(passadieci >= 11)/length(passadieci) # Q1
sum(passadieci == 11)/length(passadieci) # Q2
sum(passadieci == 12)/length(passadieci)
sum((passadieci <= 7) | (passadieci >= 15))/length(passadieci) # Q3
samlple(1:6, size=4, replace=T)
sample(1:6, size=4, replace=T)
ExptA <- function(){
rolls <- sample(1:6, size=4, replace=T)
condition <- sum(rolls == 6) > 0
return(condition)
}
ExptB <- function(){
first.die <- sample(1:6, size=24, replace=T)
second.die <- sample(1:6, size=24, replace=T)
condition <- sum((first.die == second.die) & (first.die == 6)) > 0
return(condition)
}
simsA <- replicate(100000, ExptA())
sum(simsA)/length(simsA)
simsB <- replicate(100000, ExptB())
sum(simsB)/length(simsB)
runs_500k <- 50000
dice_roll <- function(){
x = sample(1:6, size =3, replace = T)
# x
# x >= 6
# (sum(x >= 6)/3) == 1
return( (sum(x >= 6)/3) == 1)
}
dice_check <- sum(replicate(runs_500k, dice_roll())) / runs_500k
runs <- 10000
coin_trial <- function(){
sum(sample(c(0,1), size =10, replace = T)) > 6
}
coin_flips <- sum(replicate(runs, coin_trial())) / runs
cat(coin_flips)
runs_500k <- 50000
dice_roll <- function(){
x = sample(1:6, size =3, replace = T)
# x
# x >= 6
# (sum(x >= 6)/3) == 1
return( (sum(x >= 6)/3) == 1)
}
dice_check <- sum(replicate(runs_500k, dice_roll())) / runs_500k
cat(dice_check)
runs_500k <- 500000
dice_roll <- function(){
x = sample(1:6, size =3, replace = T)
# x
# x >= 6
# (sum(x >= 6)/3) == 1
return( (sum(x >= 6)/3) == 1)
}
dice_check <- sum(replicate(runs_500k, dice_roll())) / runs_500k
cat(dice_check)
runs_500k <- 500000
dice_roll <- function(){
x = sample(1:6, size =3, replace = T)
y = sample(1:6, size =3, replace = T)
z = sample(1:6, size =3, replace = T)
condition <- sum((x == y) & (y == z) & (x == z) & x == 6) > 0
return(condition)
}
sims <- replicate(runs_500k, dice_roll())
sum(sims)/length(sims)
runs_500k <- 500000
dice_roll <- function(){
x = sample(1:6, size =3, replace = T)
# x
# x >= 6
# (sum(x >= 6)/3) == 1
return( (sum(x >= 6)/3) == 1)
}
sum(replicate(runs_500k, dice_roll())) / runs_500k
runs_500k <- 500000
dice_roll <- function(){
x = sample(1:6, size =3, replace = T)
y = sample(1:6, size =3, replace = T)
z = sample(1:6, size =3, replace = T)
condition <- sum((x == y) & (y == z) & (x == z) & x == 6) > 0
return(condition)
}
sims <- replicate(runs_500k, dice_roll())
sum(sims)/length(sims)
length(sims)
runs_500k <- 500000
dice_roll <- function(){
x = sample(1:6, size =3, replace = T)
# x
# x >= 6
# (sum(x >= 6)/3) == 1
return( (sum(x >= 6)/3) == 1)
}
sum(replicate(runs_500k, dice_roll())) / runs_500k
runs_500k <- 500000
dice_roll <- function(){
x = sample(1:6, size =1, replace = T)
y = sample(1:6, size =1, replace = T)
z = sample(1:6, size =1, replace = T)
condition <- sum((x == y) & (y == z) & (x == z) & x == 6) > 0
return(condition)
}
sims <- replicate(runs_500k, dice_roll())
sum(sims)/length(sims)
table(sims)
table(sims)/length(sims)
#plot(tab)
table(sims)/length(sims)
plot(table(sims)/length(sims), xlab='Sum', ylab='Relative probability', main = '1 Roll of 3 Fair Dice')
table(sims)/length(sims)
plot(table(sims)/length(sims), xlab='Sum', ylab='Relative probability', main = '1 Roll of 3 Fair Dice and all 3 show up as a 6')
library(MonteCarlo)
install.packages("MonteCarlo")
library(MonteCarlo)
?rnorm
# Define function that generates data and applies the method of interest
ttest<-function(n,loc,scale){
# generate sample:
sample<-rnorm(n, loc, scale)
# calculate test statistic:
stat<-sqrt(n)*mean(sample)/sd(sample)
# get test decision:
decision<-abs(stat)>1.96
# return result:
return(list("decision"=decision))
}
rm(list=ls())
library(MonteCarlo)
rm(list=ls())
library(MonteCarlo)
# Define function that generates data and applies the method of interest
ttest<-function(n,loc,scale){
# generate sample:
sample<-rnorm(n, loc, scale)
# calculate test statistic:
stat<-sqrt(n)*mean(sample)/sd(sample)
# get test decision:
decision<-abs(stat)>1.96
# return result:
return(list("decision"=decision))
}
# define parameter grid:
n_grid<-c(50,100,250,500)
loc_grid<-seq(0,1,0.2)
scale_grid<-c(1,2)
# collect parameter grids in list:
param_list=list("n"=n_grid, "loc"=loc_grid, "scale"=scale_grid)
# run simulation:
MC_result<-MonteCarlo(func=ttest, nrep=1000, param_list=param_list)
# run simulation:
MC_result<-MonteCarlo(func=ttest, nrep=1000, param_list=param_list)
summary(MC_result)
# generate table:
MakeTable(output=MC_result, rows="n", cols=c("loc","scale"), digits=2, include_meta=FALSE)
